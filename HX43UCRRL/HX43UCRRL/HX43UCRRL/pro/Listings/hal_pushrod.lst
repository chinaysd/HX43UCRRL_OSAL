C51 COMPILER V9.59.0.0   HAL_PUSHROD                                                       09/21/2018 08:01:35 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HAL_PUSHROD
OBJECT MODULE PLACED IN .\Objects\hal_pushrod.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE ..\hal\hal_pushrod.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\app;..\port;..\tas
                    -k;..\hal;..\osal) DEBUG OBJECTEXTEND PRINT(.\Listings\hal_pushrod.lst) TABS(2) OBJECT(.\Objects\hal_pushrod.obj)

line level    source

   1          #include "hal_pushrod.h"
   2          #include "port_pushrod.h"
   3          
   4          typedef enum{
   5            PUSH_STOP = 0,
   6            PUSH_OPEN,
   7            PUSH_CLOSE
   8          }Push_Status_t;
   9          
  10          typedef struct{
  11            unsigned char id:4;
  12            #ifdef PUSHROD_REVERSE_SWITCH_FUNC
                unsigned char ReverseFlag:1;
                #endif
  15            #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                unsigned char IsRun:1;
                #endif
  18            Push_Status_t Sta:2;
  19          }Push_Obj_t;
  20          
  21          static XDATA Push_Obj_t Push_Obj[PUSHROD_SUM]; 
  22          
  23          #ifdef PUSHROD_REVERSE_SWITCH_FUNC
              static unsigned char Hal_PushrodSetReverseFlag(unsigned char id,unsigned char flag){
                if(id > PUSHROD_SUM)
                  return PARA_ERROR ;
                Push_Obj[id].ReverseFlag = flag;
                return SUCCEED;
              }
              #endif
  31          
  32          #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
              static unsigned char Hal_PushrodGetRunFlag(unsigned char id,unsigned char *flag){
                if(id > PUSHROD_SUM)
                  return PARA_ERROR ;
                *flag = Push_Obj[id].IsRun;
                return SUCCEED;
              }
              #endif
  40          
  41          static unsigned char Hal_PushrodOpen(unsigned char id)
  42          {
  43   1        if(id > PUSHROD_SUM)
  44   1          return PARA_ERROR ;
  45   1        
  46   1        #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                  Push_Obj[id].IsRun = True;
                #endif
  49   1        
  50   1        if(Prot_PushrodOpen(Push_Obj[id].id) == id)
  51   1          return SUCCEED;
  52   1        else  
  53   1          return SET_ERROR;
  54   1      }
C51 COMPILER V9.59.0.0   HAL_PUSHROD                                                       09/21/2018 08:01:35 PAGE 2   

  55          
  56          static unsigned char Hal_PushrodClose(unsigned char id)
  57          {
  58   1        if(id > PUSHROD_SUM)
  59   1          return PARA_ERROR ;
  60   1        
  61   1        #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                  Push_Obj[id].IsRun = True;
                #endif
  64   1        
  65   1        if(Prot_PushrodClose(Push_Obj[id].id) == id)
  66   1          return SUCCEED;
  67   1        else  
  68   1          return SET_ERROR;
  69   1      }
  70          
  71          static unsigned char Hal_PushrodStop(unsigned char id)
  72          {
  73   1        if(id > PUSHROD_SUM)
  74   1          return PARA_ERROR ;
  75   1        
  76   1        #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                  Push_Obj[id].IsRun = False;
                #endif
  79   1        
  80   1        if(Prot_PushrodStop(Push_Obj[id].id) == id)
  81   1          return SUCCEED;
  82   1        else  
  83   1          return SET_ERROR;
  84   1      }
  85          
  86          unsigned char Hal_PushrodInit(unsigned char sum)
  87          {
  88   1        unsigned char i =0;
  89   1        if(sum > PUSHROD_SUM)
  90   1          return PARA_ERROR;
  91   1      
  92   1        for(i = 0;i < sum;i ++){
  93   2          if( i != Port_PushrodInit(i))
  94   2            break;
  95   2          Push_Obj[i].id = i;
  96   2          #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                  Push_Obj[i].IsRun = FALSE;
                  #endif
  99   2          Push_Obj[i].Sta = PUSH_STOP;
 100   2        } 
 101   1        
 102   1        if(i != sum )
 103   1          return PARA_ERROR;
 104   1        return SUCCEED;
 105   1      }
 106          
 107          unsigned char Hal_PushrodControl(unsigned char id,unsigned char cmd,void *arg)
 108          {
 109   1        if(id > PUSHROD_SUM)
 110   1          return PARA_ERROR ;
 111   1        switch(cmd){
 112   2          case PUSHROD_CMD_STOP:{
 113   3            return Hal_PushrodStop(id);
 114   3          }
 115   2      
 116   2          case PUSHROD_CMD_OPEN:{
C51 COMPILER V9.59.0.0   HAL_PUSHROD                                                       09/21/2018 08:01:35 PAGE 3   

 117   3            return Hal_PushrodOpen(id);
 118   3          }
 119   2      
 120   2          case PUSHROD_CMD_CLOSE:{
 121   3            return Hal_PushrodClose(id);
 122   3          }
 123   2          
 124   2          #ifdef PUSHROD_REVERSE_SWITCH_FUNC
                  case PUSHROD_CMD_SET_REVERSE:{
                    unsigned char set = *(unsigned char*)arg;
                    return Hal_PushrodSetReverseFlag(id, set);
                  }
                  #endif
 130   2      
 131   2          #ifdef PUSHROD_GET_RUNNING_STATUS_FUNC
                  case PUSHROD_CMD_GET_RUN_STA:{
                    return Hal_PushrodGetRunFlag(id, (unsigned char *)arg);
                  }
                  #endif
 136   2          
 137   2          default:
 138   2            return PARA_ERROR;
 139   2        }
 140   1      }
*** WARNING C280 IN LINE 107 OF ..\hal\hal_pushrod.c: 'arg': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    233    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
