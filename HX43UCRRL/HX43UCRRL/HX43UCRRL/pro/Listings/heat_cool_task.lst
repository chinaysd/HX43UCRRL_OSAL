C51 COMPILER V9.59.0.0   HEAT_COOL_TASK                                                    09/19/2018 08:04:12 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HEAT_COOL_TASK
OBJECT MODULE PLACED IN .\Objects\heat_cool_task.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE ..\task\heat_cool_task.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\app;..\port;..
                    -\task;..\hal;..\osal) DEBUG OBJECTEXTEND PRINT(.\Listings\heat_cool_task.lst) TABS(2) OBJECT(.\Objects\heat_cool_task.ob
                    -j)

line level    source

   1          #include "heat_cool_task.h"
   2          #include "OSAL.h"
   3          #include "osal_timer.h"
   4          
   5          static unsigned char HeatCool_TaskID;
   6          
   7          /*private event id*/
   8          #define EVENT_COOL_A_START            0X0001
   9          #define EVENT_HEAT_A_START            0X0002
  10          #define EVENT_STOP_A                0x0004
  11          
  12          unsigned char HeatCool_TaskInit(unsigned char task_id)
  13          {
  14   1        HeatCool_TaskID = task_id;
  15   1        return SUCCEED;
  16   1      }
  17          
  18          unsigned int HeatCool_TaskProcessEvent(unsigned char task_id,unsigned int events)
  19          {
  20   1        (void)task_id;
*** WARNING C275 IN LINE 20 OF ..\task\heat_cool_task.c: expression with possibly no effect
  21   1      #ifdef HEAT_FUNC_ENABLE
                if(events & EVENT_HEAT_A_START){
                  unsigned char set = HC_OPEN;
                  Hal_HeatCoolControl(0,HC_CMD_SET_HEAT,(void*)&set);
                  /*制热要定时检测热敏电阻温度*/
                  /*to do*/
                  return (events ^ EVENT_HEAT_A_START);
                }
              #endif
  30   1        if(events & EVENT_COOL_A_START){    
  31   2          unsigned char set = HC_OPEN;
  32   2          Hal_HeatCoolControl(0,HC_CMD_SET_COOL,(void*)&set);
  33   2          return (events ^ EVENT_COOL_A_START);
  34   2        }
  35   1      
  36   1        if(events & EVENT_STOP_A){
  37   2          unsigned char set = HC_CLOSE;
  38   2          Hal_HeatCoolControl(0,HC_CMD_SET_FAN,(void*)&set);
  39   2          return (events ^ EVENT_STOP_A);
  40   2        }
  41   1        
  42   1        if(events & EVENT_COOL_A_OPEN){
  43   2          unsigned char mode,set;
  44   2          Hal_HeatCoolControl(0,HC_CMD_GET_MODE,(void*)&mode);
  45   2          set = HC_OPEN;
  46   2          Hal_HeatCoolControl(0,HC_CMD_SET_FAN,(void*)&set);
  47   2          OSAL_StopTimer(HeatCool_TaskID, EVENT_STOP_A);
  48   2          if(mode != HC_COOL_MODE){
  49   3            set = HC_CLOSE;
  50   3            Hal_HeatCoolControl(0,HC_CMD_SET_COOL,(void*)&set);
  51   3            Hal_HeatCoolControl(0,HC_CMD_SET_HEAT,(void*)&set);
  52   3            OSAL_StopTimer(HeatCool_TaskID, EVENT_COOL_A_START);
C51 COMPILER V9.59.0.0   HEAT_COOL_TASK                                                    09/19/2018 08:04:12 PAGE 2   

  53   3            OSAL_StartTimer(HeatCool_TaskID, EVENT_COOL_A_START, HEAT_COOL_DELAY);
  54   3          }   
  55   2          mode = HC_COOL_MODE;
  56   2          Hal_HeatCoolControl(0,HC_CMD_SET_MODE,(void*)&mode);
  57   2          return (events ^ EVENT_COOL_A_OPEN);
  58   2        }
  59   1      #ifdef HEAT_FUNC_ENABLE
                if(events & EVENT_HEAT_A_OPEN){
                  unsigned char mode;
                  Hal_HeatCoolGetMode(0,&mode);
                  Hal_HeatCoolSetFan(0, HC_OPEN);
                  if(mode == HC_STOP_MODE){
                    Hal_HeatCoolSetHeat(0, HC_OPEN);      
                    /*制热要定时检测热敏电阻温度*/      
                    /*to do*/
                  }else if(mode == HC_COOL_MODE){
                    Hal_HeatCoolSetHeat(0, HC_CLOSE);
                    Hal_HeatCoolSetCool(0, HC_CLOSE);
                    OSAL_StartTimer(HeatCool_TaskID, EVENT_HEAT_A_START, HEAT_COOL_DELAY);
                  }   
                  Hal_HeatCoolSetMode(0, HC_HEAT_MODE);
                  return (events ^ EVENT_HEAT_A_OPEN);
                }
              #endif
  77   1        if(events & EVENT_HEAT_COOL_A_CLOSE){
  78   2          unsigned char set;
  79   2          set = HC_CLOSE;
  80   2          Hal_HeatCoolControl(0,HC_CMD_SET_COOL,(void*)&set);
  81   2          Hal_HeatCoolControl(0,HC_CMD_SET_HEAT,(void*)&set);
  82   2          set = HC_STOP_MODE;
  83   2          Hal_HeatCoolControl(0,HC_CMD_SET_HEAT,(void*)&set);
  84   2          OSAL_StopTimer(HeatCool_TaskID, EVENT_STOP_A);
  85   2          OSAL_StopTimer(HeatCool_TaskID, EVENT_COOL_A_START);
  86   2          OSAL_StartTimer(HeatCool_TaskID, EVENT_STOP_A, HEAT_COOL_DELAY);
  87   2          return (events ^ EVENT_HEAT_COOL_A_CLOSE);
  88   2        }
  89   1      
  90   1        if(events & EVENT_HEAT_COOL_A_SUPEND){
  91   2          Hal_HeatCoolControl(0,HC_CMD_SUPEND,0);
  92   2          return (events ^ EVENT_HEAT_COOL_A_SUPEND);
  93   2        }
  94   1      
  95   1        if(events & EVENT_HEAT_COOL_A_RESUME){
  96   2          Hal_HeatCoolControl(0,HC_CMD_RESUME,0);
  97   2          return (events & EVENT_HEAT_COOL_A_RESUME);
  98   2        }
  99   1      
 100   1        return 0;
 101   1      }
 102          
 103          unsigned char HeatCool_TaskGetID(void)
 104          {
 105   1        return HeatCool_TaskID;
 106   1      }
 107          
 108          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    308    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   HEAT_COOL_TASK                                                    09/19/2018 08:04:12 PAGE 3   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
