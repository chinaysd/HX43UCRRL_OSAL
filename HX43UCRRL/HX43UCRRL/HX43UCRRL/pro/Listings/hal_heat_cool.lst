C51 COMPILER V9.59.0.0   HAL_HEAT_COOL                                                     09/21/2018 08:01:35 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HAL_HEAT_COOL
OBJECT MODULE PLACED IN .\Objects\hal_heat_cool.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE ..\hal\hal_heat_cool.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\app;..\port;..\t
                    -ask;..\hal;..\osal) DEBUG OBJECTEXTEND PRINT(.\Listings\hal_heat_cool.lst) TABS(2) OBJECT(.\Objects\hal_heat_cool.obj)

line level    source

   1          #include "hal_heat_cool.h"
   2          #include "port_heat_cool.h"
   3          
   4          typedef struct{ 
   5            unsigned char sup_flag:1;
   6            unsigned char id:3;
   7            HC_Mode_t mode:4;
   8          }HC_Obj_t;
   9          
  10          static XDATA HC_Obj_t HC_Obj[HEAT_COOL_SUM];
  11          
  12          unsigned char Hal_HeatCoolInit(unsigned char sum)
  13          {
  14   1        int i;
  15   1        if(sum > HEAT_COOL_SUM)
  16   1          return PARA_ERROR;
  17   1      
  18   1        for(i = 0; i < HEAT_COOL_SUM;i ++){
  19   2          if(Port_HeatCoolInit(i) != i)
  20   2            break;
  21   2          HC_Obj[i].id = i;
  22   2          HC_Obj[i].mode = HC_STOP_MODE;
  23   2          HC_Obj[i].sup_flag = FALSE;
  24   2        }
  25   1        
  26   1        if(i != sum )
  27   1          return PARA_ERROR;
  28   1          
  29   1        return SUCCEED;
  30   1      }
  31          
  32          static unsigned char Hal_HeatCoolSetCool(unsigned char id,unsigned char set)
  33          {
  34   1        if(id > HEAT_COOL_SUM)
  35   1          return PARA_ERROR;
  36   1        
  37   1        if(set == HC_OPEN){   
  38   2          if(Port_CoolSet(id, HC_CLOSE) != id)
  39   2            return SET_ERROR;
  40   2          if(Port_HeatSet(id,HC_OPEN) != id)
  41   2            return SET_ERROR;
  42   2        }else if(set == HC_CLOSE){
  43   2          if(Port_CoolSet(id, HC_CLOSE) != id)
  44   2            return SET_ERROR;
  45   2          if(Port_HeatSet(id,HC_CLOSE) != id)
  46   2            return SET_ERROR;
  47   2        }else{
  48   2          return PARA_ERROR;
  49   2        } 
  50   1        return SUCCEED;
  51   1      }
  52          
  53          static unsigned char Hal_HeatCoolSetHeat(unsigned char id,unsigned char set)
  54          { 
C51 COMPILER V9.59.0.0   HAL_HEAT_COOL                                                     09/21/2018 08:01:35 PAGE 2   

  55   1        if(id > HEAT_COOL_SUM)
  56   1          return PARA_ERROR;
  57   1        if(set == HC_OPEN){   
  58   2          if(Port_CoolSet(id, HC_OPEN) != id)
  59   2            return SET_ERROR;
  60   2          if(Port_HeatSet(id,HC_OPEN) != id)
  61   2            return SET_ERROR;
  62   2        }else if(set == HC_CLOSE){
  63   2          if(Port_CoolSet(id, HC_CLOSE) != id)
  64   2            return SET_ERROR;
  65   2          if(Port_HeatSet(id,HC_CLOSE) != id)
  66   2            return SET_ERROR;
  67   2        }else{
  68   2          return PARA_ERROR;
  69   2        }
  70   1        return SUCCEED;
  71   1      }
  72          
  73          static unsigned char Hal_HeatCoolSetFan(unsigned char id,unsigned char set)
  74          { 
  75   1        if(id > HEAT_COOL_SUM)
  76   1          return PARA_ERROR;
  77   1        if(Port_FanSet(id, set) != id)
  78   1          return SET_ERROR;
  79   1        return SUCCEED;
  80   1      }
  81          
  82          static unsigned char Hal_HeatCoolSetMode(unsigned char id,unsigned char mode)
  83          {
  84   1        if(id > HEAT_COOL_SUM)
  85   1          return PARA_ERROR;
  86   1        HC_Obj[id].mode = (HC_Mode_t)mode;
  87   1        if(mode == HC_STOP_MODE){
  88   2          HC_Obj[id].sup_flag = FALSE;
  89   2        }
  90   1        return SUCCEED;
  91   1      }
  92          
  93          static unsigned char Hal_HeatCoolGetMode(unsigned char id,unsigned char *mode)
  94          { 
  95   1        if(id > HEAT_COOL_SUM)
  96   1          return PARA_ERROR;
  97   1        *mode = (unsigned char)HC_Obj[id].mode;
  98   1        return SUCCEED;
  99   1      }
 100           
 101          static unsigned char Hal_HeatCoolSupend(unsigned char id)
 102          {
 103   1        if(id > HEAT_COOL_SUM)
 104   1          return PARA_ERROR;
 105   1        if(HC_Obj[id].mode == HC_COOL_MODE){
 106   2          HC_Obj[id].sup_flag = TRUE;
 107   2          if(Hal_HeatCoolSetCool(id,HC_CLOSE) != id)
 108   2            return SET_ERROR;
 109   2        }
 110   1        else if(HC_Obj[id].mode == HC_HEAT_MODE){
 111   2          HC_Obj[id].sup_flag = TRUE;
 112   2          if(Hal_HeatCoolSetHeat(id, HC_CLOSE) != id)
 113   2            return SET_ERROR;
 114   2        }
 115   1        else{
 116   2          return SUCCEED;
C51 COMPILER V9.59.0.0   HAL_HEAT_COOL                                                     09/21/2018 08:01:35 PAGE 3   

 117   2        }
 118   1        return SUCCEED;
 119   1      }
 120          
 121          static unsigned char Hal_HeatCoolGetSupSta(unsigned char id,unsigned char *sta)
 122          {
 123   1        if(id > HEAT_COOL_SUM)
 124   1          return PARA_ERROR;
 125   1        *sta = HC_Obj[id].sup_flag;
 126   1        return SUCCEED;
 127   1      }
 128          
 129          static unsigned char Hal_HeatCoolResume(unsigned char id)
 130          {
 131   1        if(id > HEAT_COOL_SUM)
 132   1          return PARA_ERROR;
 133   1        if(HC_Obj[id].mode == HC_COOL_MODE){
 134   2          if(HC_Obj[id].sup_flag){
 135   3            HC_Obj[id].sup_flag = FALSE;
 136   3            if(Hal_HeatCoolSetCool(id,HC_OPEN) != id)
 137   3              return SET_ERROR;
 138   3          }
 139   2        }
 140   1        else if(HC_Obj[id].mode == HC_HEAT_MODE){
 141   2          if(HC_Obj[id].sup_flag){
 142   3            HC_Obj[id].sup_flag = FALSE;
 143   3            if(Hal_HeatCoolSetHeat(id, HC_OPEN) != id)
 144   3              return SET_ERROR;
 145   3          }
 146   2        }
 147   1        else{
 148   2          return SUCCEED;
 149   2        }
 150   1        return SUCCEED;
 151   1      }
 152          
 153          unsigned char Hal_HeatCoolControl(unsigned char id,unsigned char cmd,void *arg)
 154          {
 155   1        if(id > HEAT_COOL_SUM)
 156   1          return PARA_ERROR;
 157   1      
 158   1        switch(cmd){
 159   2          case HC_CMD_SET_COOL:{
 160   3            unsigned char set = *(unsigned char*)arg;
 161   3            return Hal_HeatCoolSetCool(id, set);
 162   3          }
 163   2      
 164   2          case HC_CMD_SET_HEAT:{
 165   3            unsigned char set = *(unsigned char*)arg;
 166   3            return Hal_HeatCoolSetHeat(id, set);
 167   3          }
 168   2      
 169   2          case HC_CMD_SET_FAN:{
 170   3            unsigned char set = *(unsigned char*)arg;
 171   3            return Hal_HeatCoolSetFan(id, set);
 172   3          }
 173   2      
 174   2          case HC_CMD_GET_MODE:{
 175   3            return Hal_HeatCoolGetMode(id, (unsigned char *)arg);
 176   3          }
 177   2      
 178   2          case HC_CMD_SET_MODE:{
C51 COMPILER V9.59.0.0   HAL_HEAT_COOL                                                     09/21/2018 08:01:35 PAGE 4   

 179   3            unsigned char mode = *(unsigned char*)arg;
 180   3            return Hal_HeatCoolSetMode(id, mode);
 181   3          }
 182   2      
 183   2          case HC_CMD_SUPEND:{
 184   3            return Hal_HeatCoolSupend(id);
 185   3          }
 186   2      
 187   2          case HC_CMD_RESUME:{
 188   3            return Hal_HeatCoolResume(id);
 189   3          }
 190   2      
 191   2          default:
 192   2            return PARA_ERROR;
 193   2        }
 194   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    716    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
