C51 COMPILER V9.59.0.0   OSAL_TIMER                                                        09/19/2018 08:04:12 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OSAL_TIMER
OBJECT MODULE PLACED IN .\Objects\OSAL_Timer.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE ..\osal\OSAL_Timer.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\app;..\port;..\tas
                    -k;..\hal;..\osal) DEBUG OBJECTEXTEND PRINT(.\Listings\OSAL_Timer.lst) TABS(2) OBJECT(.\Objects\OSAL_Timer.obj)

line level    source

   1          #include "osal_timer.h"
   2          #include "OSAL.H"
   3          #include "comdef.h"
   4          #include <string.h>
   5          
   6          typedef struct{
   7            uint8 use_flag:1;
   8            uint8 reload_flag:1;
   9            uint8 task_id:4;  
  10            uint16 event_id;
  11            uint32 base_cnt,time_out;
  12          }OSAL_Timer_t;
  13          
  14          static XDATA OSAL_Timer_t OSAL_Timer[MAX_TIMER_NUM];
  15          
  16          void OSAL_TimerInit(void)
  17          {
  18   1        memset(OSAL_Timer,0,sizeof(OSAL_Timer));
  19   1      }
  20          
  21          uint8 OSAL_StartTimer(const uint8 task_id, const uint16 event_id,const uint32 timeout_value )
  22          {
  23   1        int i;
  24   1        for(i = 0; i < MAX_TIMER_NUM;i ++){
  25   2          if(!(OSAL_Timer[i].use_flag)){
  26   3            OSAL_Timer[i].use_flag = TRUE;
  27   3            OSAL_Timer[i].base_cnt = 0;
  28   3            OSAL_Timer[i].event_id = event_id;
  29   3            OSAL_Timer[i].reload_flag = FALSE;
  30   3            OSAL_Timer[i].task_id = task_id;
  31   3            OSAL_Timer[i].time_out = timeout_value;
  32   3            return SUCCESS;
  33   3          }
  34   2        }
  35   1        return FAILURE;
  36   1      }
  37          
  38          uint8 OSAL_ReStartTime(const uint8 task_id, const uint16 event_id)
  39          { 
  40   1        int i;
  41   1        for(i = 0; i < MAX_TIMER_NUM;i ++){
  42   2          if(OSAL_Timer[i].use_flag){
  43   3            if((OSAL_Timer[i].task_id == task_id) && (OSAL_Timer[i].event_id == event_id)){
  44   4              OSAL_Timer[i].base_cnt = 0;       
  45   4              return SUCCESS;
  46   4            }
  47   3          }
  48   2        } 
  49   1        return FAILURE;
  50   1      }
  51          
  52          #ifdef OSAL_RELOAD_TIME_FUNC
              uint8 OSAL_StartrReloadTimer(const uint8 task_id, const uint16 event_id, const uint32 timeout_value )
              {
C51 COMPILER V9.59.0.0   OSAL_TIMER                                                        09/19/2018 08:04:12 PAGE 2   

                int i;
                for(i = 0; i < MAX_TIMER_NUM;i ++){
                  if(!(OSAL_Timer[i].use_flag)){
                    OSAL_Timer[i].use_flag = TRUE;
                    OSAL_Timer[i].base_cnt = 0;
                    OSAL_Timer[i].event_id = event_id;
                    OSAL_Timer[i].reload_flag = TRUE;
                    OSAL_Timer[i].task_id = task_id;
                    OSAL_Timer[i].time_out = timeout_value;
                    return SUCCESS;
                  }
                }
                return FAILURE;
              }
              #endif
  70          
  71          uint8 OSAL_StopTimer(const uint8 task_id,const uint16 event_id)
  72          {
  73   1        int i;
  74   1        for(i = 0; i < MAX_TIMER_NUM;i ++){
  75   2          if((OSAL_Timer[i].use_flag) && (OSAL_Timer[i].task_id == task_id) && (OSAL_Timer[i].event_id == event_id
             -)){
  76   3            OSAL_Timer[i].use_flag = FALSE;
  77   3            OSAL_Timer[i].base_cnt = 0;
  78   3            OSAL_Timer[i].event_id = 0;
  79   3            OSAL_Timer[i].reload_flag = FALSE;
  80   3            OSAL_Timer[i].task_id = 0;
  81   3            OSAL_Timer[i].time_out = 0;
  82   3            return SUCCESS;
  83   3          }
  84   2        } 
  85   1        return FAILURE;
  86   1      }
  87          
  88          #ifdef OSAL_GET_TIME_STA_FUNC
              uint8 OSAL_GetTimerSta(const uint8 task_id,const uint16 event_id)
              {
                int i;
                for(i = 0; i < MAX_TIMER_NUM;i ++){
                  if((OSAL_Timer[i].use_flag) && (OSAL_Timer[i].task_id == task_id) && (OSAL_Timer[i].event_id == event_id
             -)){
                    return TRUE;
                  }
                } 
                return FALSE;
              }
              #endif
 100          
 101          void OSAL_TimerUpdata(void)
 102          {
 103   1        int i;
 104   1        for(i = 0; i < MAX_TIMER_NUM;i ++){
 105   2          if(OSAL_Timer[i].use_flag){
 106   3            if(OSAL_Timer[i].base_cnt ++ > OSAL_Timer[i].time_out){
 107   4              if(OSAL_Timer[i].reload_flag){
 108   5                OSAL_Timer[i].base_cnt = 0;
 109   5              }else{
 110   5                OSAL_Timer[i].use_flag = FALSE;
 111   5              }
 112   4              osal_set_event(OSAL_Timer[i].task_id, OSAL_Timer[i].event_id);
 113   4            }
 114   3          }
C51 COMPILER V9.59.0.0   OSAL_TIMER                                                        09/19/2018 08:04:12 PAGE 3   

 115   2        }
 116   1      }
 117          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    508    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    165    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
